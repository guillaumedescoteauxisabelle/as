#!/bin/bash
_defaultwsldistro="Ubuntu-20.04"
goon=1

if [ -e "_env.sh" ] ; then dos2unix _env.sh  &> /dev/null; fi
if [ -e ".env" ] ; then dos2unix .env  &> /dev/null;fi

. _env.sh  &> /dev/null && . .env &> /dev/null || . _env.sh &> /dev/null && goon=1 || goon=0
if [ "$binroot" == "" ] ; then export binroot=/c/Users/jeang/Dropbox/lib/bin;fi
if [ "$containername" == "" ]; then
        export containername=$(echo "$dockertag" | sed -e 's/\//_/' | sed -e 's/\:/_/' | sed -e 's/\./_/g')
        echo "Container was named automatically to : $containername"
        #echo "Please define \$containername in .env or _env.sh"
fi

if [ "$dockertag" == "" ]; then goon=0;fi #tmp fix
if [ "$1" == "--create" ] ;then goon=0;fi #passing to --create part
#export dkrunwhoami=""
#if [ "$1" == "--user" ] ;then 
#	dkrunwhoami="$(whoami)"
#	echo "Running as $dkrunwhoami"
#
#fi

# Support running on MIGMW, starting on this script on WSL
#wsl -d "Ubuntu-20.04" --cd  "$(pwd)" dkrunner
#if [ "$(uname -s | tr "6" " " | awk '// {print $1}')" == "MINGW" ]; then echo "WSL";fi
#@TODO FUNCTIONALIZE THAT FUNCTION TO RUN IN DISTRO
dkrun_wsl_wrapper=dkrunner
if [ "$(uname -s)" != "Linux" ]; then
	echo "Running container using the WSL distro"
	if [ "$dkdistro" == "" ]; then _dkdistro="$_defaultwsldistro";else _dkdistro="$dkdistro";fi
	
	wsl -d "$_dkdistro" --cd  "$(pwd)" $dkrun_wsl_wrapper "$@" #@STCGoal Run a dkrun wrapper in bin that runs $0 in WSL 
else #Normal run


# do the work
if [ "$goon" == 1 ]; then
	
dknamearg="--name $containername"
if [ "$containername" == "" ]; then
	dknamearg=""
fi


export pwdmountpath=work
if [ "$custompwdmountpath" == "" ] ; then echo "No special mount path"
else
	pwdmountpath=$custompwdmountpath
fi

if [ "$dkport" != "" ]; then _dkport=" -p $dkport "; fi

if [ "$dkport2" != "" ]; then _dkport2=" -p $dkport2 "; fi
if [ "$dkport3" != "" ]; then _dkport3=" -p $dkport3 "; fi


if [ "$xmount" != "" ]; then _xmount=" -v $xmount "; fi

if [ "$xmount2" != "" ]; then _xmount2=" -v $xmount2 "; fi
#echo "Running container : $dockertag $dknamearg $dkextra $_dkport $_dkport2 $_xmount $_xmount2"


#dkrmstop dkrestarttype dkrestart dkrunmode dkrmstop [dkvolume volname:mountpath]

if [ "$dkrestarttype" == "" ] ; then _dkrestarttype="unless-stopped"; else _dkrestarttype="$dkrestarttype";fi
if [ "$dkrestart" == "" ] ; then _dkrestart="--restart"; else _dkrestart="$dkrestart";fi

if [ "$dkrmstop" == "" ];then _dkrmstop="--rm $_dkrmstop";else _dkrmstop="$dkrmstop";fi
if [ "$dkrunmode" == "bg" ];then _dkrunmode="-d";_dkrmstop="$_dkrestart $_dkrestarttype";else _dkrunmode="-it";fi
if [ "$dkhostname" == "" ];then _dkhostname="";else _dkhostname="-h $dkhostname";fi

#docker volume inspect hello2 &> /dev/null && echo "great" || echo "nahh"
if [ "$dkvolume" == "" ]; then _dkvolume="";else 
	_dkvolume="-v $dkvolume"
	export _vname=$(echo "$dkvolume" | tr ":" " " | awk '// { print $1}')
	_vmountpath=$(echo "$dkvolume" | tr ":" " " | awk '// { print $2 }')

	#TODO create it if not exist
	docker volume inspect $_vname &> /dev/null && \
		(echo "Volume $_vname is used.") || \
		(echo "Creating volume $_vname" && \
			docker volume create $_vname && \
				echo "Volume created" || \
				echo "Failed to create volume")
fi

_dkcommand="$dkcommand"
if [ "$dkcommand" == "" ] && [ "$1" != "--user" ] ; then _dkcommand="$1" ;fi 
if [ "$dkrunmode" == "bg" ];then _dkcommand="sleep 65000d";fi #Ya, the container will stop in a while ;)

_TZ="$TZ"
if [ "$TZ" == "" ] ; then _TZ="America/New_York";fi

_dkmounthome=""
if [ "$dkmounthome" == "true" ]; then _dkmounthome=" -v $HOME:/home/$(whoami)";fi
#_xtraargs=$(echo "$_dkrunmode $_dkrmstop $dknamearg $_dkhostname $dkextra $_dkport $_dkport2 $_dkport3 $_dkvolume $_xmount $_xmount2 $_dkmounthome" | sed -e 's/   / /' | sed -e 's/  / /')

#debug
#echo "_dkrunmode=$_dkrunmode"
#echo "_dkrmstop=$_dkrmstop"

_xtraargs="$_dkrunmode $_dkrmstop $dknamearg $_dkhostname $dkextra $_dkport $_dkport2 $_dkport3 $_dkvolume $_xmount $_xmount2 $_dkmounthome"

#echo "------------------------------2204"
#echo "_xtraargs=$_xtraargs"
#echo "------------------------------2204"

#Run as USER
export dkrunwhoami=""
if [ "$1" == "--user" ] ;then
		dockertagroot="$dockertag"
	        dkrunwhoami="$(whoami)" && \
		        echo "Running as $dkrunwhoami" && \
		dockertag="$dockertag-$dkrunwhoami"
		#@STCIssue If image does not exist ??
		echo " Testing if image: $dockertagroot"
		docker inspect $dockertagroot &>/dev/null && \
			echo "Root Tag Exist" && \
			shift 1 && \
			echo "Dockertag now : $dockertag" || \
			(echo "DKBuildUser Required" i&& \
			echo "$BDIR/dkbuilduser" && \
			exit 1)

	
fi

#DISPLAY
_display="-e DISPLAY=$DISPLAY"
if [ "$DISPLAY" == "" ] || [ "$DISPLAY" == "needs-to-be-defined" ]; then _display=""; fi
__TZ_arg="-e TZ=\"$_TZ\" --cap-add SYS_TIME "
if [ "$DK_TZ" == "" ] ; then __TZ_arg="" ; fi

cmd="docker run $_xtraargs $_display \
	-v $(pwd):/$pwdmountpath \
	-v $binroot:/a/bin  $__TZ_arg \
	$dockertag $_dkcommand "

echo "$cmd"
sleep 1
if [ "$dkecho" == "1" ] || [ "$dkecho" == "true" ]; then echo "----------------------------------------------------------";echo "$cmd";echo "----------------------------------------------------"
else # Execute it after testing if installed already
if [ ! -d "$binroot" ] ; then export binroot=/c/Users/jeang/Dropbox/lib/bin;fi #@STCIssue Fix binroot not found manually

	_tst=$(docker ps -a --filter "name=$containername" | awk '/'"$containername"'/')      

	if [ "$_tst" == "" ]; then 
		# It is not installed already
		$cmd
		if [ "$dkrunmode" == "bg" ];then echo "use :   dkebash   to connect"; echo "-------------"
				$binroot/dkebash
			fi
	else
		echo "DKRun will default to opening a Bash to $containername";
		if [ "$1" == "rm" ]; then  		
			#echo "#@STCGoal ADD Feature to REMOVE CONTAINER - run: dkcrm $containername "
			
			# echo "Do you wish to Remove container $containername?"
			# select yn in "Yes" "No"
			# 	case $yn in
			# 	Yes ) $binroot/dkcRemove.sh $containername;;
			# 	No ) echo "Removal $containername CANCELED";;
			# 	esac
			read -p "Are you sure? " -n 1 -r
			# echo    # (optional) move to a new line
			if [[ ! $REPLY =~ ^[Yy]$ ]]
				echo "Removal $containername CANCELED"
			then
				echo "-------------------------------------rm..."
				if [ -f "$binroot/dkcRemove.sh" ] ; then 
				 	$binroot/dkcRemove.sh $containername
				else #wsl path stuff fix
					/c/Users/jeang/Dropbox/lib/bin/dkcRemove.sh $containername
				fi

				 echo "---------------------------------...rm"
			fi
		else 
			echo "----------------------------------------"
			#@STCIssue Container might be stopped,
			#@STCGoal Container is running 
			_tstexited=$(echo $_tst | awk '/Exited/')
			if [ "$_tstexited" != "" ] ; then #@s the container was exited
				#@a Start it
				docker start $containername &> /dev/null && echo "Container $containername started"
			fi


			if [ -f "$binroot/dkebash" ]; then 
		 		$binroot/dkebash
			else # Why it does not exist
				/c/Users/jeang/Dropbox/lib/bin/dkebash
			fi
		fi
	fi
	
fi

#Else of not defined ENV
else	
	echo "#Please define dockertag in .env.  Consider creating it using :  $0 <create> [.env|dot|MYENV (default _env.sh)]"
echo "Example of   _env.sh or .env)"
echo "------------------------------------------ "

_env_sample='dockertag=jgwill/node:16.14.0-angular

containername=ngcaishen
dkhostname=$containername

# PORT
#dkport=4000:4000

# VOLUMES
#dkvolume="myvolname220413:/app" #create or use existing one
dkvolume="$containername:/app" #create with containername name

#dkecho=true #just echo the docker run

dkcommand=bash #command to execute (default is the one in the dockerfile)

#dkextra="MY EXTRA ARGS"

#dkmounthome=true

#xmount=/tmp:/a/tmp
#xmount2=/var:/a/var

# Use TZ
#DK_TZ=1

# RUN MODE
#dkrunmode="bg" #default fg
#dkrestart="--restart" #default
#dkrestarttype="unless-stopped" #default


#####################################
#Build related
#
##chg back to that user
#dkchguser=vscode
'

# creates the ENV using --create and default env
if [ "$2" == "" ]; then _envfn="_env.sh"; else _envfn="$2";fi
if [ "$2" == "dot" ]; then _envfn=".env"; fi
echo "\$1=$1"

if [ "$1" == "--create" ] ;then 
	echo "#-------------------CREATE OPTION ACTIVATED------------------"

	if [ -e "$_envfn" ] ; then 
		echo "FILE EXIST" ; 
	else 
		echo "$_env_sample" > $_envfn && echo "$_envfn created.  vi $_envfn"
	fi
else 
	echo "$_env_sample"
	echo "example to create it if dont exist: "
	echo " $0 --create"
	echo " $0 --create .env"

fi


fi

fi #end of the else system which runs WSL on MIGMW
