    1  systemctl set-default multi-user.target
    2  reboot
    3  apt update
    4  date
    5  history
    6  cd /
    7  ls
    8  mkdir -m 777 /net
    9  mkdir -m 777 /net/downloads
   10  cd /net/downloads/
   11  ls
   12  ./NVIDIA-Linux-x86_64-415.27.run 
   13  init 3
   14  ./NVIDIA-Linux-x86_64-415.27.run 
   15  reboot
   16  #--@STCGoal Installing Nvidia using apt-get
   17  apt-get purge nvidia*
   18  add-apt-repository ppa:graphics-drivers
   19  date
   20  history
   21  time
   22  zdump EEST
   23  ntpdate
   24  apt install ntpdate
   25  ntpdate
   26  timedatectl 
   27  reboot
   28  cd /net/downloads/
   29  ls
   30  ./NVIDIA-Linux-x86_64-415.27.run 
   31  #--@STCGoal NVidia from PPA
   32  sudo add-apt-repository ppa:graphics-drivers/ppa
   33  date
   34  phoronix-test-suite default-benchmark openarena xonotic tesseract gputest unigine-valley
   35  ls -ltr
   36  dpkg -i phoronix-test-suite_9.4.0_all.deb 
   37  phoronix-test-suite --version
   38  phoronix-test-suite default-benchmark openarena xonotic tesseract gputest unigine-valley
   39  ls
   40  history | grep ppa
   41  sudo add-apt-repository ppa:graphics-drivers/ppa
   42  date
   43  apt update
   44  apt list nvidia*
   45  apt list nvidia-*
   46  apt list nvidia-* > nvidia_package_list_apt.txt
   47  cat nvidia_package_list_apt.txt 
   48  cat nvidia_package_list_apt.txt  | more
   49  cat nvidia_package_list_apt.txt  | grep cuda
   50  sudo add-apt-repository ppa:graphics-drivers
   51  date
   52  date
   53  timedatectl status
   54  history
   55  #--@STCGoal Time from Internet Server because apt REPO PPA failed I think because of that
   56  apt install chrony
   57  chronyd -q
   58  chronyd -Q
   59  timedatectl list-timezones
   60  timedatectl list-timezones \| grep Montr
   61  timedatectl list-timezones \| grep New
   62  timedatectl list-timezones | grep New
   63  timedatectl set-timezone America/New_York
   64  date
   65  timedatectl
   66  timedatectl set-ntp on
   67  apt-get install ntp
   68  ntpq -p
   69  date
   70  date "17:00Ãˆ
   71  date "17:00"
   72  date
   73  date "Wed Feb 26 05:00:56 EST 2020"
   74  date "Feb 26 05:00:56 EST 2020"
   75  date "Feb 26 05:00:56 PM 2020"
   76  date -d "2020-02-26T17:01"
   77  date
   78  TZ=UTC date -d "2020-02-26T17:01 -2 hours"
   79  date
   80  #@STCIssue not working Date TIme my ass
   81  history > h.2020022617.datetime.txt
   82  cd /net/downloads/
   83  ls
   84  #--@STCGoal Nvidia Drivers from PPA
   85  apt install phoronix-test-suite
   86  add-apt-repository ppa:graphics-drivers/ppa
   87  timedatectl 
   88  python -c 'import time;print(time.asctime(time.localtime()))' 
   89  sntp pool.ntp.org 
   90  date
   91  nslookup google.com
   92  tlsdate -nV ntp.org
   93  sntp pool.ntp.org 
   94  apt install vim
   95  vi /etc/ntp.conf 
   96  service ntp restart
   97  service ntp status
   98  date
   99  ufw allow from any to any port 123 proto udp
  100  apt-get install ntpdate
  101  apt autoremove
  102  date --set="Wed Feb 26 18:26 EDT 2020"
  103  date --set="Wed Feb 26 18:26 EST 2020"
  104  date
  105  python -c 'import time;print(time.asctime(time.localtime()))' 
  106  add-apt-repository ppa:graphics-drivers/ppa
  107  lspci | grep NVIDIA
  108  ls
  109  ls -ltr
  110  cat nvidia_package_list_apt.txt | grep 415
  111  apt install nvidia-driver-415
  112  ls -ltr
  113  ls -ltrh
  114  history >history_202002261833.nvidia_installed.txt
  115  reboot
  116  history
  117  date --set="Thu Feb 27 17:38 EST 2020"
  118  date
  119  apt update
  120  apt list nvidia*
  121  apt install nvidia-driver-440/bionic
  122  reboot
  123  cd /etc
  124  vi hosts
  125  cd /opt/nuke/Nuke12.1v1/
  126  ./Nuke12.1 
  127  jupy
  128  python -V
  129  python3 -V
  130  sudo apt-get update && sudo apt-get install python3
  131  python3 -V
  132  cd /usr/local/foundry/RLM/
  133  ls
  134  chmod 777 *
  135  chmod 777 .
  136  docker ps
  137  docker container stop c2e480a75cab
  138  docker ps
  139  docker run -it -p 8888:8888 tensorflow/tensorflow:latest-gpu-jupyter  # Start Jupyter server
  140  docker ps
  141  echo docker run -it -p 8888:8888 tensorflow/tensorflow:latest-gpu-jupyter  # Start Jupyter server
  142  echo "docker run -it -p 8888:8888 tensorflow/tensorflow:latest-gpu-jupyter  # Start Jupyter server"
  143  echo "docker run -it -p 8888:8888 tensorflow/tensorflow:latest-gpu-jupyter  # Start Jupyter server" >> ~/.bash_aliases
  144  vi ~/.bash_aliases 
  145  bash
  146  history
  147  mkdir -m 777 /a
  148  history | grep apt
  149  cd /net/as
  150  mkdir -m 777 histories
  151  cd histories/
  152  history > history.202002271820.root.nvidia-installed.txt
  153  cd ..
  154  echo " apt install vim
  155  add-apt-repository ppa:graphics-drivers
  156  apt install nvidia-driver-440/bionic
  157  " >> README.md
  158  ls
  159  cat tmp.md 
  160  reboot
  161  history| grep date
  162  cd /etc
  163  dmesg -n CUR
  164  sudo dmesg -n0
  165  vi rsyslog.conf 
  166  vi rsyslog.d/50-default.conf 
  167  mkdir -m 777 /a/backups
  168  ln -sf /a/backups/ /backups
  169  cp rsyslog.d/50-default.conf /backups
  170  ls /backups
  171  fg
  172  service rsyslog restart
  173  ssh-keygen 
  174  cat .ssh/id_rsa.pub 
  175  ssh root@jgwill.com
  176  ls -l .ssh/
  177  chmod 700 .ssh/*
  178  ssh root@jgwill.com
  179  luarocks install https://raw.githubusercontent.com/szym/display/master/display-scm-0.rockspec
  180  apt install luasocket
  181  vi /etc/hosts
  182  nslookup guillaumeisabelle.com
  183  fg
  184  ssh root@py
  185  ls
  186  cd /a/7ART816/
  187  ls
  188  cd neurips2019creativity.github.io/stylegan2/
  189  ls
  190  docker build - < Dockerfile
  191  docker ps
  192  ls
  193  npm init
  194  ls
  195  git add package.json 
  196  vi package.json 
  197  git commit . -m "add: package to help building and keep track of what action I execute
  198  "
  199  git config --global user.email "jgi@jgwil.com
  200  git commit . -m "add: package to help building and keep track of what action I execute
  201  "
  202  git push
  203  cd
  204  cat .ssh/id_rsa.pub 
  205  cd /a/7ART816/neurips2019creativity.github.io/stylegan2
  206  git push
  207  ls
  208  docker images list
  209  docker image list
  210  vi Dockerfile 
  211  cat git pull
  212  git pull
  213  ls
  214  git pull
  215  chmod 777 sh__start.sh 
  216  ./sh__start.sh 
  217  apt-get install docker-compose
  218  ./sh__start.sh 
  219  vi docker-compose.yml
  220  ./sh__start.sh 
  221  git commit . -m "fix"
  222  git push
  223  git pull
  224  ./sh__start.sh 
  225  docker ps
  226  docker container list
  227  docker container ls
  228  docker containers ls
  229  docker containers list
  230  docker container list
  231  docker image list
  232  cat sh__start.sh 
  233  docker-compose up -d
  234  docker ps
  235  docker image list
  236  cd /a/7ART816/
  237  git pull
  238  cd neurips2019creativity.github.io/stylegan2/
  239  ls
  240  docker exec -it stylegan2_aiserver "bash"
  241  docker exec -it 97822f7aae29 "bash"
  242  docker image list
  243  docker exec -it stylegan2_aiserver:latest "bash"
  244  docker create 97822f7aae29
  245  docker ps
  246  docker container list
  247  docker start 0f6dd3830aea4b230a338c069664ccbc3c0657be1cccc28ca61e891cb149cb83
  248  docker ps
  249  history
  250  docker exec -it 0f6dd3830aea4b230a338c069664ccbc3c0657be1cccc28ca61e891cb1 "bash"
  251  docker start -it 0f6dd3830aea4b230a338c069664ccbc3c0657be1cccc28ca61e891cb1 "bash"
  252  docker ps
  253  git pull
  254  docker-compose up -d
  255  docker ps
  256  git pull
  257  chmod 777 connect.sh 
  258  ./connect.sh 
  259  docker ps
  260  vi connect.sh 
  261  :q
  262  git pull
  263  git commit . -m "crap"
  264  git pull
  265  ./connect.sh 
  266  docker ps
  267  docker container list
  268  docker container stop 411fdae9e32b
  269  docker container list
  270  ./sh__start.sh 
  271  mkdir tmp
  272  mv Dockerfile tmp/
  273  mv tmp/Dockerfile  .
  274  git add tmp/
  275  git mv Dockerfile tmp/
  276  git commit . -m "cleared Dockerfile"
  277  git push
  278  docker container list
  279  ./connect.sh 
  280  docker exec -it 411fdae9e32b "bash"
  281  docker container list
  282  docker exec -it 411fdae9e32b "bash"
  283  docker exec -it jg-stylegan2  "bash"
  284  reboot
  285  nvcc --version
  286  cd /a
  287  git clone https://github.com/NVIDIA/cuda-samples.git
  288  cd stylegan2/
  289  ls
  290  nvcc test_nvcc.cu -o test_nvcc -run
  291  #@STCIssue not working on Docker image but on the host machine yes
  292  history
  293  git pull
  294  #Using pre-trained networks
  295  # https://github.com/GuillaumeAI/stylegan2/#using-pre-trained-networks
  296  # Generate uncurated ffhq images (matches paper Figure 12)
  297  python run_generator.py generate-images --network=gdrive:networks/stylegan2-ffhq-config-f.pkl   --seeds=6600-6625 --truncation-psi=0.5
  298  cat /home/jgi/.bashrc |grep virt
  299  cat /home/jgi/.bashrc |grep ven
  300  cat /home/jgi/.bash_aliases | grep v
  301  cat /home/jgi/.bash_ai 
  302  cd
  303  cp -r /home/jg
  304  cd /a/stylegan2/
  305  chown -R jgi.jgi .
  306  su - jgi
  307  cd
  308  cat .bashrc 
  309  su - jgi
  310  ven
  311  venv
  312  su - jgi
  313  nvcc --version
  314  set
  315  set  |grep LD
  316  echo $PATH
  317  su - jgi
  318  which nvcc
  319  /usr/local/cuda-10.2/bin/nvcc --version
  320  nvcc --version
  321  bash
  322  apt-get purge nvidia-*
  323  nvcc
  324  apt install nvidia-cuda-toolkit
  325  apt install nvidia-utils-390
  326  apt install nvidia-340
  327  nvcc --version
  328  apt install nvidia-cuda-toolkit
  329  nvcc --version
  330  apt install nvidia-utils-440
  331  apt install nvidia-cuda-toolkit
  332  nvcc --version
  333  apt list nvidia-cuda-toolkit
  334  apt list nvidia-cuda-toolkit*
  335  apt list nvidia-cuda*
  336  cd /net
  337  ls
  338  cd downloads/
  339  ls
  340  mkdir cuda
  341  cd cuda/
  342  ls
  343  wget http://developer.download.nvidia.com/compute/cuda/10.2/Prod/local_installers/cuda_10.2.89_440.33.01_linux.run
  344  sh cuda_10.2.89_440.33.01_linux.run
  345  nvcc --version
  346  bash
  347  nvcc --verios
  348  nvcc --version
  349  history
  350  docker pull jgwill/aitfstylegan2:latest
  351  history |grep dockuer
  352  history |grep docker
  353  docker container list
  354  docker image list
  355  docker run -it 0b357d6d5b43 "bash"
  356  nvcc --version
  357  which nvcc
  358  cat /usr/bin/nvcc
  359  mv /usr/bin/nvcc /usr/bin/nvcc.old
  360  nvcc --version
  361  echo $PATH
  362  /usr/local/cuda-10.2/bin/nvcc --version
  363  bash
  364  cd /a/7ART816/
  365  ls
  366  git pull
  367  cd ..
  368  ls
  369  git clone git@github.com:GuillaumeAI/stylegan2.git
  370  cd stylegan2/
  371  ls
  372  ls -l
  373  docker pull tensorflow/tensorflow:1.15.0-gpu-py3
  374  docker run tensorflow/tensorflow:1.15.0-gpu-py3
  375  docker container list
  376  docker exec -it stylegan2_aiserver "bash"
  377  docker exec -it 411fdae9e32b "bash"
  378  docker container list
  379  docker container rm 411fdae9e32b
  380  docker container stop 411fdae9e32b
  381  docker container rm 411fdae9e32b
  382  docker image list
  383  docker exec -it stylegan2_aiserver "bash"
  384  docker run tensorflow/tensorflow:1.15.0-gpu-py3
  385  docker container list
  386  docker run -it tensorflow/tensorflow:1.15.0-gpu-py3 "bash"
  387  docker container list
  388  vi /net/as/GPU.md
  389  cd /net/as
  390  git pull
  391  git add GPU.md 
  392  git commit . -m "add: GPU"
  393  git push
  394  chown -R jgi.jgi .
  395  history
  396  docker run -it tensorflow/tensorflow:1.15.0-gpu-py3 "bash"
  397  top
  398  cd
  399  vi .bashrc 
  400  cat .bashrc 
  401  vi .bashrc 
  402  bash
  403  cd /net/downloads/
  404  ls
  405  cd cuda/
  406  ls
  407  ./cuda_10.2.89_440.33.01_linux.run
  408  sh cuda_10.2.89_440.33.01_linux.run
  409  nvcc --version
  410  history
  411  cd /net/as
  412  ls
  413  history > capturing/history.root.20051216.txt && git add $_
  414  history > capturing/history.root.20051216.txt 
